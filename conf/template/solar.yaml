###
### junand 09.05.2023
###

  - binary_sensor:

      - name: pv_generating
        unique_id: pv_generating
        availability: "{{ states ( 'sensor.sh10rt_master_powerflow_state' ) | is_number or states ( 'sensor.sh10rt_slave_powerflow_state' ) | is_number }}"
        state: >
            {% set result = false %}
            {% if states ( 'sensor.sh10rt_master_powerflow_state' ) | is_number %}
                {% set result = result or states ( 'sensor.sh10rt_master_powerflow_state' ) | int (default=0) | bitwise_and ( 0x1 ) > 0 %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_powerflow_state' ) | is_number %}
                {% set result = result or states ( 'sensor.sh10rt_slave_powerflow_state' ) | int (default=0) | bitwise_and ( 0x1 ) > 0 %}
            {% endif %}
            {{ result }}
        icon: mdi:solar-power
        attributes:
            icon_color: >
                {% if is_state ( 'binary_sensor.pv_generating', 'on' ) %}
                    limegreen
                {% else %}
                    silver
                {% endif %}

      - name: sh10rt_master_inverter_state_badge
        unique_id: sh10rt_master_inverter_state_badge
        state: >
            {% set val = states ( 'sensor.sh10rt_master_inverter_state' ) %}
            {% if val in ["Running", "Derated Running", "Restarting", "Startup"] %}
                on
            {% else %}
                off
            {% endif %}
        icon: mdi:home-lightning-bolt
        attributes:
            icon_color: >
                {% set val = states ( 'sensor.sh10rt_master_inverter_state' ) %}
                {% if val in ["Running", "Derated Running", "Restarting", "Startup"] %}
                    limegreen
                {% elif val in ["Standby", "Initial Standby"] %}
                    dodgerblue
                {% elif val in ["Fault", "Stop"] %}
                    red
                {% else %}
                    silver
                {% endif %}
            status: "{{ states ( 'sensor.sh10rt_master_inverter_state' ) }}"
            state_code: "{{ states ( 'sensor.sh10rt_master_system_state' ) }}"

      - name: sh10rt_slave_inverter_state_badge
        unique_id: sh10rt_slave_inverter_state_badge
        state: >
            {% set val = states ( 'sensor.sh10rt_slave_inverter_state' ) %}
            {% if val in ["Running", "Derated Running", "Restarting", "Startup"] %}
                on
            {% else %}
                off
            {% endif %}
        icon: mdi:home-lightning-bolt
        attributes:
            icon_color: >
                {% set val = states ( 'sensor.sh10rt_slave_inverter_state' ) %}
                {% if val in ["Running", "Derated Running", "Restarting", "Startup"] %}
                    limegreen
                {% elif val in ["Standby", "Initial Standby"] %}
                    dodgerblue
                {% elif val in ["Fault", "Stop"] %}
                    red
                {% else %}
                    silver
                {% endif %}
            status: "{{ states ( 'sensor.sh10rt_slave_inverter_state' ) }}"
            state_code: "{{ states ( 'sensor.sh10rt_slave_system_state' ) }}"

  - sensor:

      - name: total_dc_power
        unique_id: total_dc_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'sensor.sh10rt_master_total_dc_power' ) | is_number or states ( 'sensor.sh10rt_slave_total_dc_power' ) | is_number }}"
        state: >
            {% set result = 0 %}
            {% if states ( 'sensor.sh10rt_master_total_dc_power' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_master_total_dc_power' ) | float %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_total_dc_power' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_slave_total_dc_power' ) | float %}
            {% endif %}
            {{ result | round ( 0 ) }}

      - name: estimated_energy_production_today
        unique_id: estimated_energy_production_today
        unit_of_measurement: kWh
        device_class: energy
        availability: "{{ states ( 'sensor.energy_production_today' ) | is_number and states ( 'sensor.energy_production_today_2' ) | is_number }}"
        state: "{{ states ( 'sensor.energy_production_today' ) | float + states ( 'sensor.energy_production_today_2' ) | float }}"
  
        # 0x0000 = 0        Running
        # 0x0001 = 1        Stop
        # 0x0002 = 2        Shutdown
        # 0x0004 = 4        Emergency Stop
        # 0x0008 = 8        Standby
        # 0x0010 = 16       Initial standby
        # 0x0014 = 20       Microgrid +
        # 0x0020 = 41       Startup
        # 0x0040 = 64       Running
        # 0x0041 = 65       Off-grid Charge
        # 0x0080 = 128      Derating Running
        # 0x0100 = 256      Fault
        # 0x0200 = 512      Update failed
        # 0x0400 = 1024     Maintain Mode
        # 0x0800 = 2048     Forced Mode
        # 0x1000 = 4096     Off-grid mode
        # 0x1111 = 4369     Uninitialized
        # 0x1200 = 4608     Initial Standby
        # 0x1300 = 4864     Shutdown
        # 0x1400 = 5120     Standby
        # 0x1500 = 5376     Emergency Stop
        # 0x1600 = 5632     Startup
        # 0x1700 = 5888     ACFI Self-test Shutdown
        # 0x1800 = 6144     Intelligent Station Building Status
        # 0x1900 = 6400     Safe Mode
        # 0x2000 = 8192     Open Loop
        # 0x2500 = 9472     Communicate Fault +
        # 0x2501 = 9473     Restarting
        # 0x4000 = 16384    External EMS Mode
        # 0x4001 = 16385    Emergeny Charging Operation
        # 0x5500 = 21760    Fault
        # 0x8000 = 32768    Stop
        # 0x8100 = 33024    Derated Running
        # 0x8200 = 33280    Dispatch Running
        # 0x9100 = 37120    Warn Run

        # 13.12.2024: new system state 0x80 only for master inverter inerpreted as running
        # 30.08.2025 bases on documentation v1.1.9 it is now "Derated Running"
      - name: sh10rt_master_inverter_state
        unique_id: sh10rt_master_inverter_state
        state: >
            {% set val = states ( 'sensor.sh10rt_master_system_state' ) | int (default = 0) %}
            {% if  val == 0x0040 or val == 0x0000 %}
                Running
            {% elif  val == 0x0080 or val == 0x8100 %}
                Derated Running
            {% elif  val == 0x0041 %}
                Off-grid Charge
            {% elif  val == 0x0200 %}
                Update Failed
            {% elif  val == 0x0400 %}
                Maintain Mode
            {% elif  val == 0x0800 %}
                Forced Mode
            {% elif  val == 0x1000 %}
                Off-grid Mode
            {% elif  val == 0x1111 %}
                Uninitialized
            {% elif  val == 0x0010 or val == 0x1200 %}
                Initial Standby
            {% elif  val == 0x0002 or val == 0x1300 %}
                Shutdown
            {% elif  val == 0x0008 or val == 0x1400 %}
                Standby
            {% elif  val == 0x0004 or val == 0x1500 %}
                Emergency Stop
            {% elif  val == 0x0020 or val == 0x1600 %}
                Startup
            {% elif  val == 0x1700 %}
                AFCI Selftest Shutdown
            {% elif  val == 0x1800 %}
                Intelligent Station Building Status
            {% elif  val == 0x1900 %}
                Safe Mode
            {% elif  val == 0x2000 %}
                Open Loop
            {% elif  val == 0x2501 %}
                Restarting
            {% elif  val == 0x4000 %}
                External EMS Mode
            {% elif  val == 0x4001 %}
                Emergency Charging Operation
            {% elif  val == 0x0100 or val == 0x5500 %}
                Fault
            {% elif  val == 0x0001 or val == 0x8000 %}
                Stop
            {% elif  val == 0x8100 %}
                Derated Runnung
            {% elif  val == 0x8200 %}
                Dispatch Running
            {% elif  val == 0x9100 %}
                Warn Run
            {% else %}
                {{ val }}
            {% endif %}

        # 23.02.2025: new system state 0x80 for slave too, seen on startup after controlled blackout
      - name: sh10rt_slave_inverter_state
        unique_id: sh10rt_slave_inverter_state
        state: >
            {% set val = states ( 'sensor.sh10rt_slave_system_state' ) | int (default = 0) %}
            {% if  val == 0x0040 or val == 0x0000 %}
                Running
            {% elif  val == 0x0080 or val == 0x8100 %}
                Derated Running
            {% elif  val == 0x0041 %}
                Off-grid Charge
            {% elif  val == 0x0200 %}
                Update Failed
            {% elif  val == 0x0400 %}
                Maintain Mode
            {% elif  val == 0x0800 %}
                Forced Mode
            {% elif  val == 0x1000 %}
                Off-grid Mode
            {% elif  val == 0x1111 %}
                Uninitialized
            {% elif  val == 0x0010 or val == 0x1200 %}
                Initial Standby
            {% elif  val == 0x0002 or val == 0x1300 %}
                Shutdown
            {% elif  val == 0x0008 or val == 0x1400 %}
                Standby
            {% elif  val == 0x0004 or val == 0x1500 %}
                Emergency Stop
            {% elif  val == 0x0020 or val == 0x1600 %}
                Startup
            {% elif  val == 0x1700 %}
                AFCI Selftest Shutdown
            {% elif  val == 0x1800 %}
                Intelligent Station Building Status
            {% elif  val == 0x1900 %}
                Safe Mode
            {% elif  val == 0x2000 %}
                Open Loop
            {% elif  val == 0x2501 %}
                Restarting
            {% elif  val == 0x4000 %}
                External EMS Mode
            {% elif  val == 0x4001 %}
                Emergency Charging Operation
            {% elif  val == 0x0100 or val == 0x5500 %}
                Fault
            {% elif  val == 0x0001 or val == 0x8000 %}
                Stop
            {% elif  val == 0x8100 %}
                Derated Runnung
            {% elif  val == 0x8200 %}
                Dispatch Running
            {% elif  val == 0x9100 %}
                Warn Run
            {% else %}
                {{ val }}
            {% endif %}

      - name: sh10rt_master_device_type
        unique_id: sh10rt_master_device_type
        state: >
            {% set val = states ( 'sensor.sh10rt_master_device_type_code' ) | int (default = 0) %}
            {% if val  == 0x0D06 %}
                SH3K6
            {% elif val  == 0x0D07 %}
                SH4K6
            {% elif val  == 0x0D09 %}
                SH5K-20  
            {% elif val  == 0x0D03 %}
                SH5K-V13
            {% elif val  == 0x0D0C %}
                SH5K-30
            {% elif val  == 0x0D0A %}
                SH3K6-30
            {% elif val  == 0x0D0B %}
                SH4K6-30
            {% elif val  == 0x0D0F %}
                SH5.0RS
            {% elif val  == 0x0D0D %}
                SH3.6RS
            {% elif val  == 0x0D0E %}
                SH4.6RS
            {% elif val  == 0x0D10 %}
                SH6.0RS
            {% elif val  == 0x0E01 %}
                SH6.0RT
            {% elif val  == 0x0E02 %}
                SH8.0RT
            {% elif val  == 0x0E03 %}
                SH10RT
            {% elif val  == 0x0E0E %}
                SH8.0RT-V112
            {% elif val  == 0x0E0F %}
                SH10RT-V112
            {% elif val  == 0x0E00 %}
                SH5.0RT
            {% else %}
                Unknown device code! --> {{ val }}
            {% endif %}

      - name: sh10rt_slave_device_type
        unique_id: sh10rt_slave_device_type
        state: >
            {% set val = states ( 'sensor.sh10rt_slave_device_type_code' ) | int (default = 0) %}
            {% if val  == 0x0D06 %}
                SH3K6
            {% elif val  == 0x0D07 %}
                SH4K6
            {% elif val  == 0x0D09 %}
                SH5K-20  
            {% elif val  == 0x0D03 %}
                SH5K-V13
            {% elif val  == 0x0D0C %}
                SH5K-30
            {% elif val  == 0x0D0A %}
                SH3K6-30
            {% elif val  == 0x0D0B %}
                SH4K6-30
            {% elif val  == 0x0D0F %}
                SH5.0RS
            {% elif val  == 0x0D0D %}
                SH3.6RS
            {% elif val  == 0x0D0E %}
                SH4.6RS
            {% elif val  == 0x0D10 %}
                SH6.0RS
            {% elif val  == 0x0E01 %}
                SH6.0RT
            {% elif val  == 0x0E02 %}
                SH8.0RT
            {% elif val  == 0x0E03 %}
                SH10RT
            {% elif val  == 0x0E0E %}
                SH8.0RT-V112
            {% elif val  == 0x0E0F %}
                SH10RT-V112
            {% elif val  == 0x0E00 %}
                SH5.0RT
            {% else %}
                Unknown device code! --> {{ val }}
            {% endif %}

      # - name: import_power
        # unit_of_measurement: W
        # device_class: power
        # availability: "{{ states ( 'sensor.sh10rt_master_export_power_raw' ) | is_number }}"
        # state: >
            # {% if states ( 'sensor.sh10rt_master_export_power_raw' ) | int < 0 %}
                # {{ states('sensor.sh10rt_master_export_power_raw')|int *-1 }}
            # {% else %}
                # 0
            # {% endif %}

        # # power to grid: positive if exporting, else zero
      # - name: export_power
        # unit_of_measurement: W
        # device_class: power
        # state_class: measurement
        # availability: "{{ states ( 'sensor.sh10rt_master_export_power_raw' ) | is_number }}"
        # state: >
            # {% if states ( 'sensor.sh10rt_master_export_power_raw' ) | int > 0 %}
                # {{ states ( 'sensor.sh10rt_master_export_power_raw' ) }}
            # {% else %}
                # 0
            # {% endif %}

      - name: load_power
        unique_id: load_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >
                {{
                    states ( 'sensor.electricity_meter_power' ) | is_number
                }}
        state: >
                {{
                    (
                        states ( 'sensor.electricity_meter_power' ) | float  ( 0 )
                        + states ( 'sensor.total_dc_power' ) | float ( 0 )
                        - states ( 'sensor.battery_power' ) | float ( 0 )
                        - states ( 'sensor.wallbox_power' ) | float ( 0 )
                    ) | round ( 0 )
                }}

      # Inverter States from modbus reference manual
      # 0xAA forced charge
      # 0xBB forced discharge
      # 0xCC Stop (Default)
      - name: battery_forced_charge_discharge
        unique_id: battery_forced_charge_discharge
        state: >
            {% set val = states ( 'sensor.sh10rt_master_battery_forced_charge_discharge_raw' ) %}
            {% if (  val | int ( default = 0 ) == 0x00AA ) %}
                Forced charge
            {% elif (  val | int ( default = 0 ) == 0x00BB ) %}
                Forced discharge
            {% elif (  val | int ( default = 0 ) == 0x00CC ) %}
                Stop (Default)
            {% else %}
                {{ val }}
            {% endif %}

      - name: sh10rt_master_powerflow_txt
        unique_id: sh10rt_master_powerflow_txt
        state: >-
            {% set val = states ( 'sensor.sh10rt_master_powerflow_state' ) | int ( 0 ) %}
            {% set s =
            ( 'pv ' if val | bitwise_and ( 0x01 ) > 0 else '' )
            + ( 'charge ' if val | bitwise_and ( 0x02 ) > 0 else '' )
            + ( 'discharge ' if val | bitwise_and ( 0x04 ) > 0 else '' )
            + ( 'load ' if val | bitwise_and ( 0x08 ) > 0 else '' )
            + ( 'export ' if val | bitwise_and ( 0x10 ) > 0 else '' )
            + ( 'import' if val | bitwise_and ( 0x20 ) > 0 else '' )
            %}
            {{ s.split () | join ( '|' ) }}

      - name: sh10rt_slave_powerflow_txt
        unique_id: sh10rt_slave_powerflow_txt
        state: >-
            {% set val = states ( 'sensor.sh10rt_slave_powerflow_state' ) | int ( 0 ) %}
            {% set s =
            ( 'pv ' if val | bitwise_and ( 0x01 ) > 0 else '' )
            + ( 'charge ' if val | bitwise_and ( 0x02 ) > 0 else '' )
            + ( 'discharge ' if val | bitwise_and ( 0x04 ) > 0 else '' )
            + ( 'load ' if val | bitwise_and ( 0x08 ) > 0 else '' )
            + ( 'export ' if val | bitwise_and ( 0x10 ) > 0 else '' )
            + ( 'import' if val | bitwise_and ( 0x20 ) > 0 else '' )
            %}
            {{ s.split () | join ( '|' ) }}

  - trigger:
      - platform: state
        entity_id: sensor.sh10rt_master_daily_pv_generation
        for: 00:00:10
      - platform: state
        entity_id: sensor.sh10rt_slave_daily_pv_generation
        for: 00:00:10
    sensor:
      - name: daily_pv_generation
        unique_id: daily_pv_generation
        unit_of_measurement: kWh
        device_class: energy
        availability: "{{ states ( 'sensor.sh10rt_master_daily_pv_generation' ) | is_number and states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | is_number }}"
        state: >
            {% set result = 0 %}
            {% if states ( 'sensor.sh10rt_master_daily_pv_generation' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_master_daily_pv_generation' ) | float %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | float %}
            {% endif %}
            {{ result | round ( 1 ) }}

  - trigger:
      - platform: state
        entity_id: sensor.solar_meter_quarterhourly
        attribute: last_reset
    sensor:
      - name: solar_quarterhourly
        unique_id: solar_quarterhourly
        unit_of_measurement: kWh
        state: "{{ state_attr ( 'sensor.solar_meter_quarterhourly', 'last_period' ) }}"
        attributes:
            last_reset: '{{ state_attr ( "sensor.solar_meter_quarterhourly", "last_reset" ) }}'
