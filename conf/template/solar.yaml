###
### junand 09.05.2023
###

  - binary_sensor:

      - name: pv_generating
        availability: "{{ states ( 'sensor.sh10rt_master_running_state' ) | is_number or states ( 'sensor.sh10rt_slave_running_state' ) | is_number }}"
        state: >-
            {% set result = false %}
            {% if states ( 'sensor.sh10rt_master_running_state' ) | is_number %}
                {% set result = result or states ( 'sensor.sh10rt_master_running_state' ) | int (default=0) | bitwise_and ( 0x1 ) > 0 %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_running_state' ) | is_number %}
                {% set result = result or states ( 'sensor.sh10rt_slave_running_state' ) | int (default=0) | bitwise_and ( 0x1 ) > 0 %}
            {% endif %}
            {{ result }}
        icon: mdi:solar-power
        attributes:
            icon_color: >-
                {% if is_state ( 'binary_sensor.pv_generating', 'on' ) %}
                    limegreen
                {% else %}
                    silver
                {% endif %}


      - name: battery_charging
        availability: "{{ states ( 'sensor.sh10rt_master_running_state' ) | is_number }}"
        state: "{{ states ( 'sensor.sh10rt_master_running_state' ) | int (default=0) | bitwise_and ( 0x2 ) > 0 }}"

      - name: battery_discharging
        availability: "{{ states ( 'sensor.sh10rt_master_running_state' ) | is_number }}"
        state: "{{ states ( 'sensor.sh10rt_master_running_state' ) | int (default=0) | bitwise_and ( 0x4 ) > 0 }}"

      - name: battery_state
        state: >-
            {% set val = states ( 'sensor.sh10rt_master_battery_level' ) | default ( 0 ) | int %}
            {% set threshold = states ( 'input_number.battery_state_off_below' ) | int %}
            {% if val < threshold %}
                off
            {% else %}
                on
            {% endif %}
        icon: >-
            {% set val = states ( 'sensor.sh10rt_master_battery_level' ) | default ( 0 ) | int %}
            {% if is_state ( 'binary_sensor.battery_charging', 'on' ) %}
                {% if val == 100 %}
                    mdi:battery-charging-100
                {% elif val >= 90 %}
                    mdi:battery-charging-90
                {% elif val >= 80 %}
                    mdi:battery-charging-80
                {% elif val >= 70 %}
                    mdi:battery-charging-70
                {% elif val >= 60 %}
                    mdi:battery-charging-60
                {% elif val >= 50 %}
                    mdi:battery-charging-50
                {% elif val >= 40 %}
                    mdi:battery-charging-40
                {% elif val >= 30 %}
                    mdi:battery-charging-30
                {% elif val >= 20 %}
                    mdi:battery-charging-20
                {% elif val >= 10 %}
                    mdi:battery-charging-10
                {% else %}
                    mdi:battery-charging-outline
                {% endif %}
            {% else %}
                {% if val == 100 %}
                    mdi:battery
                {% elif val >= 90 %}
                    mdi:battery-90
                {% elif val >= 80 %}
                    mdi:battery-80
                {% elif val >= 70 %}
                    mdi:battery-70
                {% elif val >= 60 %}
                    mdi:battery-60
                {% elif val >= 50 %}
                    mdi:battery-50
                {% elif val >= 40 %}
                    mdi:battery-40
                {% elif val >= 30 %}
                    mdi:battery-30
                {% elif val >= 20 %}
                    mdi:battery-20
                {% elif val >= 10 %}
                    mdi:battery-10
                {% else %}
                    mdi:battery-outline
                {% endif %}
            {% endif %}
        attributes:
            icon_color: >-
                {% if is_state ( 'binary_sensor.battery_charging', "on" ) %}
                    limegreen
                {% elif is_state ( 'binary_sensor.battery_discharging', "on" ) %}
                    red
                {% else %}
                    silver
                {% endif %}

      - name: importing_power
        availability: "{{ states ( 'sensor.sh10rt_master_running_state' ) | is_number }}"
        state: >-
            {% if states ( 'sensor.sh10rt_master_running_state') | is_number %}
                {{ states ( 'sensor.sh10rt_master_running_state' ) | int (default=0) | bitwise_and ( 0x20 ) > 0 }}
            {% else %} 
                0
            {% endif %}

      - name: exporting_power
        availability: "{{ states ( 'sensor.sh10rt_master_running_state') | is_number }}"
        state: >-
            {% if states ( 'sensor.sh10rt_master_running_state' ) | is_number %}
                {{ states ( 'sensor.sh10rt_master_running_state' ) | int (default=0) | bitwise_and ( 0x10 ) > 0 }}
            {% else %} 
                0
            {% endif %}

      - name: grid_state
        state: >-
            {% if states ( 'binary_sensor.importing_power' ) or states ( 'binary_sensor.exporting_power' ) %}
                on
            {% else %}
                off
            {% endif %}
        icon: >-
            {% if is_state ( 'binary_sensor.importing_power', 'on' ) %}
                mdi:transmission-tower-export
            {% elif is_state ( 'binary_sensor.exporting_power', 'on' ) %}
                mdi:transmission-tower-import
            {% else %}
                mdi:transmission-tower
            {% endif %}
        attributes:
            icon_color: >-
                {% if is_state ( 'binary_sensor.importing_power', 'on' ) %}
                    {% if states ( 'sensor.electricity_meter_power' ) | float > states ( 'input_number.electricity_import_critical_above' ) | float %}
                        red
                    {% else %}
                        silver
                    {% endif %}
                {% elif is_state ( 'binary_sensor.exporting_power', 'on' ) %}
                    limegreen
                {% else %}
                    red
                {% endif %}

  - sensor:

      - name: total_dc_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'sensor.sh10rt_master_total_dc_power' ) | is_number or states ( 'sensor.sh10rt_slave_total_dc_power' ) | is_number }}"
        state: >-
            {% set result = 0 %}
            {% if states ( 'sensor.sh10rt_master_total_dc_power' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_master_total_dc_power' ) | float %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_total_dc_power' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_slave_total_dc_power' ) | float %}
            {% endif %}
            {{ result | round ( 0 ) }}

      - name: daily_pv_generation
        unit_of_measurement: kWh
        device_class: energy
        availability: "{{ states ( 'sensor.sh10rt_master_daily_pv_generation' ) | is_number or states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | is_number }}"
        state: >-
            {% set result = 0 %}
            {% if states ( 'sensor.sh10rt_master_daily_pv_generation' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_master_daily_pv_generation' ) | float %}
            {% endif %}
            {% if states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | is_number %}
                {% set result = result + states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | float %}
            {% endif %}
            {{ result | round ( 1 ) }}

      - name: estimated_energy_production_today
        unit_of_measurement: kWh
        device_class: energy
        availability: "{{ states ( 'sensor.energy_production_today' ) | is_number and states ( 'sensor.energy_production_today_2' ) | is_number }}"
        state: "{{ states ( 'sensor.energy_production_today' ) | float + states ( 'sensor.energy_production_today_2' ) | float }}"
  
# 0x0002 = 2 = Stop
# 0x0008 = 8 = Standby
# 0x0010 = 16 = Initial standby
# 0x0020 = 41 = Startup
# 0x0040 = 64 = Running
# 0x0100 = 256 = Fault
# 0x0400 = 1024 = Running in maintain mode
# 0x0800 = 2048 = Running in forced mode
# 0x1000 = 4096 = Running in off-grid mode
# 0x2501 = 9473 = Restarting
# 0x4000 = 16384 = Running in External EMS mode

      - name: sh10rt_master_inverter_state
        state: >-
            {% set val = states ( 'sensor.sh10rt_master_system_state' ) | int (default = 0) %}
            {% if  val == 0x0002 %}
                Stop
            {% elif  val == 0x0008 %}
                Standby
            {% elif  val == 0x0010 %}
                Initial Standby
            {% elif  val == 0x0020 %}
                Startup
            {% elif  val == 0x0040 %}
                Running
            {% elif  val == 0x0041 %}
                Startup
            {% elif  val == 0x0100 %}
                Fault
            {% elif  val == 0x0400 %}
                Maintain mode
            {% elif  val == 0x0800 %}
                Forced mode
            {% elif  val == 0x1000 %}
                Off-grid mode
            {% elif  val == 0x2501 %}
                Restarting
            {% elif  val == 0x4000 %}
                External EMS mode
            {% else %}
                Unknown - should not see me!
            {% endif %}

      - name: sh10rt_slave_inverter_state
        state: >-
            {% set val = states ( 'sensor.sh10rt_slave_system_state' ) | int (default = 0) %}
            {% if  val == 0x0002 %}
                Stop
            {% elif  val == 0x0008 %}
                Standby
            {% elif  val == 0x0010 %}
                Initial Standby
            {% elif  val == 0x0020 %}
                Startup
            {% elif  val == 0x0040 %}
                Running
            {% elif  val == 0x0041 %}
                Startup
            {% elif  val == 0x0100 %}
                Fault
            {% elif  val == 0x0400 %}
                Maintain mode
            {% elif  val == 0x0800 %}
                Forced mode
            {% elif  val == 0x1000 %}
                Off-grid mode
            {% elif  val == 0x2501 %}
                Restarting
            {% elif  val == 0x4000 %}
                External EMS mode
            {% else %}
                Unknown - should not see me!
            {% endif %}

      - name: sh10rt_master_device_type
        state: >-
            {% set val = states ( 'sensor.sh10rt_master_device_type_code' ) | int (default = 0) %}
            {% if val  == 0x0D06 %}
                SH3K6
            {% elif val  == 0x0D07 %}
                SH4K6
            {% elif val  == 0x0D09 %}
                SH5K-20  
            {% elif val  == 0x0D03 %}
                SH5K-V13
            {% elif val  == 0x0D0C %}
                SH5K-30
            {% elif val  == 0x0D0A %}
                SH3K6-30
            {% elif val  == 0x0D0B %}
                SH4K6-30
            {% elif val  == 0x0D0F %}
                SH5.0RS
            {% elif val  == 0x0D0D %}
                SH3.6RS
            {% elif val  == 0x0D0E %}
                SH4.6RS
            {% elif val  == 0x0D10 %}
                SH6.0RS
            {% elif val  == 0x0E01 %}
                SH6.0RT
            {% elif val  == 0x0E02 %}
                SH8.0RT
            {% elif val  == 0x0E03 %}
                SH10RT
            {% elif val  == 0x0E0E %}
                SH8.0RT-V112
            {% elif val  == 0x0E0F %}
                SH10RT-V112
            {% elif val  == 0x0E00 %}
                SH5.0RT
            {% else %}
                Unknown device code!
            {% endif %}

      - name: sh10rt_slave_device_type
        state: >-
            {% set val = states ( 'sensor.sh10rt_slave_device_type_code' ) | int (default = 0) %}
            {% if val  == 0x0D06 %}
                SH3K6
            {% elif val  == 0x0D07 %}
                SH4K6
            {% elif val  == 0x0D09 %}
                SH5K-20  
            {% elif val  == 0x0D03 %}
                SH5K-V13
            {% elif val  == 0x0D0C %}
                SH5K-30
            {% elif val  == 0x0D0A %}
                SH3K6-30
            {% elif val  == 0x0D0B %}
                SH4K6-30
            {% elif val  == 0x0D0F %}
                SH5.0RS
            {% elif val  == 0x0D0D %}
                SH3.6RS
            {% elif val  == 0x0D0E %}
                SH4.6RS
            {% elif val  == 0x0D10 %}
                SH6.0RS
            {% elif val  == 0x0E01 %}
                SH6.0RT
            {% elif val  == 0x0E02 %}
                SH8.0RT
            {% elif val  == 0x0E03 %}
                SH10RT
            {% elif val  == 0x0E0E %}
                SH8.0RT-V112
            {% elif val  == 0x0E0F %}
                SH10RT-V112
            {% elif val  == 0x0E00 %}
                SH5.0RT
            {% else %}
                Unknown device code!
            {% endif %}

        # positive if charging and negative if discharging
      - name: battery_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'binary_sensor.battery_charging' ) and states ( 'binary_sensor.battery_discharging' ) and states ( 'sensor.sh10rt_master_battery_power_raw' ) | is_number }}"
        state: >-
            {% if is_state ( 'binary_sensor.battery_charging', 'on' ) %}
                {{ states('sensor.sh10rt_master_battery_power_raw' ) | float }}
            {% elif is_state ( 'binary_sensor.battery_discharging', 'on' ) %}
                {{ states ( 'sensor.sh10rt_master_battery_power_raw' ) | float * -1 }} 
            {% else %} 
                0
            {% endif %}

        # positive if charging else zero
      - name: battery_charging_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'binary_sensor.battery_charging' ) and states ( 'sensor.sh10rt_master_battery_power_raw' ) | is_number }}"
        state: >-
            {% if is_state ( 'binary_sensor.battery_charging', 'on' ) %}
                {{ states('sensor.sh10rt_master_battery_power_raw') }}
            {% else %}
                0
            {% endif %}

        # positive if discharging else zero

      - name: battery_discharging_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'binary_sensor.battery_charging' ) and states ( 'sensor.sh10rt_master_battery_power_raw' ) | is_number }}"
        state: >-
            {% if is_state ( 'binary_sensor.battery_discharging', 'on' ) %}
                {{ states ( 'sensor.sh10rt_master_battery_power_raw' ) }}
            {% else %}
                0
            {% endif %}

      - name: import_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'sensor.sh10rt_master_export_power_raw' ) | is_number }}"
        state: >-
            {% if states ( 'sensor.sh10rt_master_export_power_raw' ) | int < 0 %}
                {{ states('sensor.sh10rt_master_export_power_raw')|int *-1 }}
            {% else %}
                0
            {% endif %}

        # power to grid: positive if exporting, else zero
      - name: export_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ states ( 'sensor.sh10rt_master_export_power_raw' ) | is_number }}"
        state: >-
            {% if states ( 'sensor.sh10rt_master_export_power_raw' ) | int > 0 %}
                {{ states ( 'sensor.sh10rt_master_export_power_raw' ) }}
            {% else %}
                0
            {% endif %}

      - name: electricity_daily_in_costs
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_daily_in' ) | is_number and states ( 'input_number.electricity_price_in' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_daily_in' ) | float * states ( 'input_number.electricity_price_in' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_yearly_in_costs
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_yearly_in' ) | is_number and states ( 'input_number.electricity_price_in' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_yearly_in' ) | float * states ( 'input_number.electricity_price_in' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_daily_out_returns
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_daily_out' ) | is_number and states ( 'input_number.electricity_price_out' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_daily_out' ) | float * states ( 'input_number.electricity_price_out' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_yearly_out_returns
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_yearly_out' ) | is_number and states ( 'input_number.electricity_price_out' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_yearly_out' ) | float * states ( 'input_number.electricity_price_out' ) | float ) | round ( 2 ) ) }}"
