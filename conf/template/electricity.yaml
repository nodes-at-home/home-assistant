###
### 31.03.2023
###

  - binary_sensor:

      - name: importing_power
        availability: "{{ states ( 'sensor.sh10rt_master_powerflow_state' ) | is_number }}"
        state: >
            {% if states ( 'sensor.sh10rt_master_powerflow_state') | is_number %}
                {{ states ( 'sensor.sh10rt_master_powerflow_state' ) | int (default=0) | bitwise_and ( 0x20 ) > 0 }}
            {% else %}
                0
            {% endif %}

      - name: exporting_power
        availability: "{{ states ( 'sensor.sh10rt_master_powerflow_state') | is_number }}"
        state: >
            {% if states ( 'sensor.sh10rt_master_powerflow_state' ) | is_number %}
                {{ states ( 'sensor.sh10rt_master_powerflow_state' ) | int (default=0) | bitwise_and ( 0x10 ) > 0 }}
            {% else %}
                0
            {% endif %}

      - name: grid_state
        availability: "{{ states ( 'sensor.electricity_meter_power') | is_number and states ( 'input_number.electricity_import_critical_above' ) | is_number }}"
        state: >
            {% if states ( 'binary_sensor.importing_power' ) or states ( 'binary_sensor.exporting_power' ) %}
                on
            {% else %}
                off
            {% endif %}
        icon: >
            {% if is_state ( 'binary_sensor.importing_power', 'on' ) %}
                mdi:transmission-tower-export
            {% elif is_state ( 'binary_sensor.exporting_power', 'on' ) %}
                mdi:transmission-tower-import
            {% else %}
                mdi:transmission-tower
            {% endif %}
        attributes:
            icon_color: >
                {% if states ( 'sensor.electricity_meter_power' ) | float | abs > states ( 'input_number.electricity_import_critical_above' ) | float %}
                  {% if is_state ( 'binary_sensor.importing_power', 'on' ) %}
                      fuchsia
                  {% elif is_state ( 'binary_sensor.exporting_power', 'on' ) %}
                      limegreen
                  {% else %}
                      silver
                  {% endif %}
                {% else  %}
                    silver
                {% endif %}

  - sensor:

      - name: electricity_daily_in_costs
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_daily_in' ) | is_number and states ( 'input_number.electricity_price_in' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_daily_in' ) | float * states ( 'input_number.electricity_price_in' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_yearly_in_costs
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_yearly_in' ) | is_number and states ( 'input_number.electricity_price_in' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_yearly_in' ) | float * states ( 'input_number.electricity_price_in' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_daily_out_returns
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_daily_out' ) | is_number and states ( 'input_number.electricity_price_out' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_daily_out' ) | float * states ( 'input_number.electricity_price_out' ) | float ) | round ( 2 ) ) }}"

      - name: electricity_yearly_out_returns
        unit_of_measurement: EUR
        device_class: monetary
        availability: "{{ states ( 'sensor.electricity_meter_yearly_out' ) | is_number and states ( 'input_number.electricity_price_out' ) | is_number }}"
        state: "{{ '{:.2f}'.format ( ( states ( 'sensor.electricity_meter_yearly_out' ) | float * states ( 'input_number.electricity_price_out' ) | float ) | round ( 2 ) ) }}"

  - trigger:
      - platform: time_pattern
        minutes: '/5'
      # - platform: state
        # entity_id: sensor.electricity_meter_daily_in
        # for: 00:00:10
      # - platform: state
        # entity_id: sensor.electricity_meter_daily_out
        # for: 00:00:10
      # - platform: state
        # entity_id: sensor.sh10rt_master_daily_pv_generation
        # for: 00:00:10
      # - platform: state
        # entity_id: sensor.sh10rt_slave_daily_pv_generation
        # for: 00:00:10
      # - platform: state
        # entity_id: sensor.sh10rt_master_daily_battery_discharge
        # for: 00:00:10
      # - platform: state
        # entity_id: sensor.sh10rt_master_daily_battery_charge
        # for: 00:00:10
    sensor:
      - name: daily_load
        unit_of_measurement: kWh
        device_class: energy
        availability: >
                {{
                    states ( 'sensor.electricity_meter_daily_in' ) | is_number
                    and states ( 'sensor.electricity_meter_daily_out' ) | is_number
                    and states ( 'sensor.sh10rt_master_daily_pv_generation' ) | is_number
                    and states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | is_number
                    and states ( 'sensor.sh10rt_master_daily_battery_discharge' ) | is_number
                    and states ( 'sensor.sh10rt_master_daily_battery_charge' ) | is_number
                }}
        state: >
            {% set t = now() %}
            {# daily_load is zero on the first 10 minutes of a day, for correct calculation when daily sensors resetting #}
            {% if t >= today_at("00:00") and t < today_at("00:10") %}
                {{ 0 }}
            {% else %}
                {% set lastvalue = state_attr ( 'sensor.daily_load', 'lastvalue' ) %}
                {# if no lastvalue found, then the calculated positive value wins #}
                {% set lastvalue = 0 if not is_number ( lastvalue ) else lastvalue %}
                {% set value = states ( 'sensor.electricity_meter_daily_in' ) | float
                             - states ( 'sensor.electricity_meter_daily_out' ) | float
                             + states ( 'sensor.sh10rt_master_daily_pv_generation' ) | float
                             + states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | float
                             + states ( 'sensor.sh10rt_master_daily_battery_discharge' ) | float
                             - states ( 'sensor.sh10rt_master_daily_battery_charge' ) | float
                %}
                {{ [ value, lastvalue ] | max | round ( 1 ) }}
            {% endif %}
        attributes:
            lastvalue: >
                {% set t = now() %}
                {# daily_load is zero on the first 10 minutes of a day, for correct calculation when daily sensors resetting #}
                {% if t >= today_at("00:00") and t < today_at("00:10") %}
                    {{ 0 }}
                {% else %}
                    {% set lastvalue = state_attr ( 'sensor.daily_load', 'lastvalue' ) %}
                    {# if no lastvalue found, then the calculated positive value wins #}
                    {% set lastvalue = 0 if not is_number ( lastvalue ) else lastvalue %}
                    {% set value = states ( 'sensor.electricity_meter_daily_in' ) | float
                                 - states ( 'sensor.electricity_meter_daily_out' ) | float
                                 + states ( 'sensor.sh10rt_master_daily_pv_generation' ) | float
                                 + states ( 'sensor.sh10rt_slave_daily_pv_generation' ) | float
                                 + states ( 'sensor.sh10rt_master_daily_battery_discharge' ) | float
                                 - states ( 'sensor.sh10rt_master_daily_battery_charge' ) | float
                    %}
                    {{ [ value, lastvalue ] | max | round ( 1 ) }}
                {% endif %}

  - trigger:
      - platform: state
        entity_id: sensor.tasmota_lk13be_power
    sensor:
      - name: electricity_meter_power
        unit_of_measurement: W
        state: >
            {% set val = states ( 'sensor.tasmota_lk13be_power' ) | float | round ( 0 ) %}
            {% set lastval = state_attr ( 'sensor.electricity_meter_power', 'lastvalue' ) | float ( 0 ) | round ( 0 ) %}
            {% set max = states ( 'input_number.electricity_meter_threshold_power' ) | float | round ( 0 ) %}
            {% if val == 0 or val > max or val < -max %}
                {{ lastval }}
            {% else %}
                {{ val }}
            {% endif %}
        attributes:
            lastvalue: >
                {% set val = states ( 'sensor.tasmota_lk13be_power' ) | float | round ( 0 ) %}
                {% set lastval = state_attr ( 'sensor.electricity_meter_power', 'lastvalue' ) | float ( 0 ) | round ( 0 ) %}
                {% set max = states ( 'input_number.electricity_meter_threshold_power' ) | float | round ( 0 ) %}
                {% if val == 0 or val > max or val < -max %}
                    {{ lastval }}
                {% else %}
                    {{ val }}
                {% endif %}

  - trigger:
      - platform: state
        entity_id: sensor.tasmota_lk13be_energy_total_in
    sensor:
      - name: electricity_meter_in
        unit_of_measurement: kWh
        state: >
            {% set val = states ( 'sensor.tasmota_lk13be_energy_total_in' ) | float %}
            {% set lastval = state_attr ( 'sensor.electricity_meter_in', 'lastvalue' ) %}
            {% set tolerance = states ( 'input_number.electricity_meter_threshold_energy' ) | multiply ( 0.001 ) | float %}
            {% if lastval %}
                {% if val < lastval %}
                    {{ lastval }}
                {% elif val > lastval + tolerance %}
                    {{ lastval }}
                {% else %}
                    {{ val }}
                {% endif %}
            {% else %}
                {{ val }}
            {% endif %}
        attributes:
            lastvalue: >
                {% set val = states ( 'sensor.tasmota_lk13be_energy_total_in' ) | float %}
                {% set lastval = state_attr ( 'sensor.electricity_meter_in', 'lastvalue' ) %}
                {% set tolerance = states ( 'input_number.electricity_meter_threshold_energy' ) | multiply ( 0.001 ) | float %}
                {% if lastval %}
                    {% if val < lastval %}
                        {{ lastval }}
                    {% elif val > lastval + tolerance %}
                        {{ lastval }}
                    {% else %}
                        {{ val }}
                    {% endif %}
                {% else %}
                    {{ val }}
                {% endif %}

  - trigger:
      - platform: state
        entity_id: sensor.tasmota_lk13be_energy_total_out
    sensor:
      - name: electricity_meter_out
        unit_of_measurement: kWh
        state: >
            {% set val = states ( 'sensor.tasmota_lk13be_energy_total_out' ) | float %}
            {% set lastval = state_attr ( 'sensor.electricity_meter_out', 'lastvalue' ) %}
            {% set tolerance = states ( 'input_number.electricity_meter_threshold_energy' ) | multiply ( 0.001 ) | float %}
            {% if lastval %}
                {% if val < lastval %}
                    {{ lastval }}
                {% elif val > lastval + tolerance %}
                    {{ lastval }}
                {% else %}
                    {{ val }}
                {% endif %}
            {% else %}
                {{ val }}
            {% endif %}
        attributes:
            lastvalue: >
                {% set val = states ( 'sensor.tasmota_lk13be_energy_total_out' ) | float %}
                {% set lastval = state_attr ( 'sensor.electricity_meter_out', 'lastvalue' ) %}
                {% set tolerance = states ( 'input_number.electricity_meter_threshold_energy' ) | multiply ( 0.001 ) | float %}
                {% if lastval %}
                    {% if val < lastval %}
                        {{ lastval }}
                    {% elif val > lastval + tolerance %}
                        {{ lastval }}
                    {% else %}
                        {{ val }}
                    {% endif %}
                {% else %}
                    {{ val }}
                {% endif %}

  - trigger:
      - platform: state
        entity_id: sensor.electricity_meter_quarterhourly_in
        attribute: last_reset
    sensor:
      - name: electricity_quarterhourly_in
        unit_of_measurement: kWh
        state: "{{ state_attr ( 'sensor.electricity_meter_quarterhourly_in', 'last_period' ) }}"
        attributes:
            last_reset: "{{ state_attr ( 'sensor.electricity_meter_quarterhourly_in', 'last_reset' ) }}"

  - trigger:
      - platform: state
        entity_id: sensor.electricity_meter_quarterhourly_out
        attribute: last_reset
    sensor:
      - name: electricity_quarterhourly_out
        unit_of_measurement: kWh
        state: "{{ state_attr ( 'sensor.electricity_meter_quarterhourly_out', 'last_period' ) }}"
        attributes:
            last_reset: "{{ state_attr ( 'sensor.electricity_meter_quarterhourly_out', 'last_reset' ) }}"
    
  - trigger:
      - platform: state
        entity_id: sensor.electricity_meter_quarterhourly_in
        attribute: last_reset
        for: 00:00:10
      - platform: state
        entity_id: sensor.electricity_meter_quarterhourly_out
        attribute: last_reset
        for: 00:00:10
    sensor:
      - name: electricity_price
        unit_of_measurement: ct/kWh
        state: "{{ state_attr ( 'sensor.epex_spot_de_lu_price', 'price_ct_per_kwh' ) | float }}"
        attributes:
            static_price: "{{ states ( 'input_number.electricity_price_in' ) | float | multiply ( 100 ) }}"
            dynamic_price: "{{ states ( 'sensor.epex_spot_de_lu_net_price' ) | float }}"
            eeg_refund: "{{ states ( 'input_number.electricity_price_out' ) | float | multiply ( 100 ) }}"
            electricity_out: "{{ states ( 'sensor.electricity_quarterhourly_out' ) | float }}"
            electricity_in: "{{ states ( 'sensor.electricity_quarterhourly_in' ) | float }}"

  - trigger:
      - platform: state
        entity_id: sensor.load_meter_quarterhourly
        attribute: last_reset
    sensor:
      - name: load_quarterhourly
        unit_of_measurement: kWh
        state: "{{ state_attr ( 'sensor.load_meter_quarterhourly', 'last_period' ) }}"
        attributes:
            last_reset: '{{ state_attr ( "sensor.load_meter_quarterhourly", "last_reset" ) }}'
