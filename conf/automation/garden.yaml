###
### 13.03.2021 new
###

  - alias: irrigation_off
    id: irrigation_off
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Wasser aus'
    actions:
      - action: switch.turn_off
        entity_id:
          - switch.relay_garden_valve1
          - switch.relay_garden_valve2
          - switch.relay_garden_valve3
          - switch.relay_garden2_valve1
          - switch.relay_garden2_valve2
          - switch.relay_garden2_valve3

  - alias: irrigation_valve1_on
    id: irrigation_valve1_on
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Hecke bewässern'
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve1

  - alias: irrigation_valve2_on
    id: irrigation_valve2_on
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Hochbeete bewässern'
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve2

  - alias: irrigation_valve3_on
    id: irrigation_valve3_on
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Rosengarten bewässern'
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve3

  - alias: irrigation_valve1_off_after_timeout
    id: irrigation_valve1_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden_valve1
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve1' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden_valve1

  - alias: irrigation_valve2_off_after_timeout
    id: irrigation_valve2_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden_valve2
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve2' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden_valve2

  - alias: irrigation_valve3_off_after_timeout
    id: irrigation_valve3_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden_valve3
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve3' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden_valve3

  - alias: irrigation_valve4_off_after_timeout
    id: irrigation_valve4_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden2_valve1
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve4' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden2_valve1

  - alias: irrigation_valve5_off_after_timeout
    id: irrigation_valve5_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden2_valve2
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve5' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden_valve3

  - alias: irrigation_valve6_off_after_timeout
    id: irrigation_valve6_off_after_timeout
    triggers:
      - trigger: state
        entity_id: switch.relay_garden2_valve3
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.irrigation_duration_valve6' ) | int }}"
    actions:
      - action: switch.turn_off
        entity_id: switch.relay_garden2_valve3

  - alias: irrigation_valve1
    id: irrigation_valve1
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_1
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve1
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve1_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve1_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve1_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve1_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve1_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve1_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve1_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve1

  - alias: irrigation_valve2
    id: irrigation_valve2
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_2
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve2
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve2_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve2_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve2_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve2_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve2_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve2_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve2_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve2

  - alias: irrigation_valve3
    id: irrigation_valve3
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_3
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve3
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve3_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve3_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve3_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve3_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve3_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve3_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve3_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden_valve3

  - alias: irrigation_valve4
    id: irrigation_valve4
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_4
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve4
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve4_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve4_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve4_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve4_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve4_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve4_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve4_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden2_valve1

  - alias: irrigation_valve5
    id: irrigation_valve5
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_5
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve5
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve5_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve5_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve5_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve5_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve5_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve5_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve5_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden2_valve2

  - alias: irrigation_valve6
    id: irrigation_valve6
    triggers:
      - trigger: time
        at: input_datetime.irrigation_start_6
    condition:
        # check manual flag
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: 'on'
        # flag from irrigation rules
      - condition: state
        entity_id: input_boolean.irrigation_scheduled_valve6
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.irrigation_valve6_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.irrigation_valve6_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.irrigation_valve6_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.irrigation_valve6_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.irrigation_valve6_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.irrigation_valve6_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.irrigation_valve6_at_sunday' )    == 'on'
            }}
    actions:
      - action: switch.turn_on
        entity_id: switch.relay_garden2_valve3

  - alias: irrigation_schedule
    id: irrigation_schedule
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_precipitation_threshold
      - trigger: state
        entity_id: sensor.precipitation_7d_plus_forecast
    actions:
      - variables:
            mode: >
                {% set val = states ( 'sensor.precipitation_7d_plus_forecast' ) | float %}
                {% set thr = states ( 'input_number.irrigation_precipitation_threshold' ) | float %}
                {% set t_max = states ( 'sensor.dht22_terrace_temperature_max' ) | float %}
                {% set t_thr_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | float %}
                {% if val < thr and t_max >= t_thr_low %}
                    on
                {% else %}
                    off
                {% endif %}
      - repeat:
            count: 6
            sequence:
              - action: "input_boolean.turn_{{ mode }}"
                target:
                    entity_id: "input_boolean.irrigation_scheduled_valve{{ repeat.index }}"

  - alias: irrigation_set_temperature_thresholds_by_low
    id: irrigation_set_temperature_thresholds_by_low
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_low
    actions:
      - variables:
            temp_high_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {{ max ( [temp_low, temp_high] ) }}
            temp_hot_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ max ( [temp_low, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_high
        data:
            value: "{{ temp_high_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_hot
        data:
            value: "{{ temp_hot_new }}"

  - alias: irrigation_set_temperature_thresholds_by_high
    id: irrigation_set_temperature_thresholds_by_high
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_high
    actions:
      - variables:
            temp_low_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {{ min ( [temp_low, temp_high] ) }}
            temp_hot_new: >
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ max ( [temp_high, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_low
        data:
            value: "{{ temp_low_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_hot
        data:
            value: "{{ temp_hot_new }}"

  - alias: irrigation_set_temperature_thresholds_by_hot
    id: irrigation_set_temperature_thresholds_by_hot
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_hot
    actions:
      - variables:
            temp_low_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ min ( [temp_low, temp_hot] ) }}
            temp_high_new: >
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ min ( [temp_high, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_low
        data:
            value: "{{ temp_low_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_high
        data:
            value: "{{ temp_high_new }}"

  - alias: hydrotower_pump_switching
    id: hydrotower_pump_switching
    mode: single
    max_exceeded: silent
    trigger:
      - platform: time_pattern
        minutes: "/1"
    condition:
      - condition: state
        entity_id: input_boolean.hydrotower_activated
        state: 'on'
    action:
      - service: switch.turn_on
        entity_id:
            - switch.relay_hydrotower_pump
      - delay:
            minutes: "{{ states ( 'input_number.hydrotower_pump_duration' ) | int }}"
      - service: switch.turn_off
        entity_id:
            - switch.relay_hydrotower_pump
      - delay:
            minutes: "{{ states ( 'input_number.hydrotower_pump_period' ) | int - states ( 'input_number.hydrotower_pump_duration' ) | int - 1 }}"

  - alias: pool_pump_switching
    id: pool_pump_switching
    mode: single
    max_exceeded: silent
    triggers:
      # check every minute
      - platform: time_pattern
        minutes: "/1"
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.pool_pump_activated
        state: 'on'
      - condition: time
        after: input_datetime.pool_pump_start
        before: input_datetime.pool_pump_end
    actions:
      - service: switch.turn_on
        entity_id:
            - switch.poolpumpe
      # pump switched on for n minutes
      - delay:
            minutes: "{{ states ( 'input_number.pool_pump_duration_period' ) | int }}"
      - service: switch.turn_off
        entity_id:
            - switch.poolpumpe
      # automation throttled, see above at mode and max_exceeded
      - delay:
            minutes: "{{ states ( 'sensor.pool_pump_period_length' ) | int - states ( 'input_number.pool_pump_duration_period' ) | int - 1 }}"

  - alias: pool_pump_off_after_timeout
    id: pool_pump_off_after_timeout
    triggers:
      - platform: state
        entity_id: switch.poolpumpe
        to: "on"
        for:
            minutes: "{{ states ( 'input_number.pool_pump_duration_period' ) | int }}"
    actions:
      - service: switch.turn_off
        entity_id: switch.poolpumpe

  - alias: set_pool_nonworking
    id: set_pool_nonworking
    triggers:
    actions:
      - service: mqtt.publish
        data:
            topic: nodes@home/sensor/ds18b20/pool/value/temperature
            payload: "{\"value\":\"außer Betrieb\",\"unit\":\"\"}"
            qos: 1
            retain: true

  - alias: waterpump_emergency_stop
    id: waterpump_emegency_stop
    trigger:
      - platform: template
        value_template: "{{ states ( 'sensor.wasserpumpe_power' ) | int > states ( 'input_number.waterpump_emergency_stop_power_threshold' ) | int }}"
        for:
            minutes: "{{ states ( 'input_number.waterpump_emergency_stop_duration' ) | int }}"
    condition:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    action:
      - service: notify.simplepush
        data:
          message: "Notfallstop Wasserpumpe mit Leistung größer {{ states ( 'input_number.waterpump_emergency_stop_power_threshold' ) | int }} für {{ states ( 'input_number.waterpump_emergency_stop_duration' ) | int }} Minuten."
          title: "Home Assistant ({{ states ( 'input_text.hostname' ) | lower }})"
      - service: switch.turn_off
        entity_id: switch.wasserpumpe

  - alias: mower_start
    id: mower_start
    triggers:
      - trigger: time
        at: input_datetime.mowing_start
    conditions:
        # check stage
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
        # check manual flag
      - condition: state
        entity_id: input_boolean.mowing_activated
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.mowing_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.mowing_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.mowing_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.mowing_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.mowing_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.mowing_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.mowing_at_sunday' )    == 'on'
            }}
    actions:
      - action: gardena_smart_system.start_override
        target:
            entity_id: lawn_mower.sileno
        data:
            duration: "{{ ( as_timestamp ( today_at ( states ( 'input_datetime.mowing_end' ) ) ) - as_timestamp ( today_at ( states ( 'input_datetime.mowing_start' ) ) ) ) | int }}"

  - alias: mower_end
    id: mower_end
    triggers:
      - trigger: time
        at: input_datetime.mowing_end
    conditions:
        # check stage
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    action:
      - service: lawn_mower.pause
        entity_id: lawn_mower.sileno
