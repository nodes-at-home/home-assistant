###
### 13.03.2021 new
###

  - alias: garden_irrigation_off
    id: garden_irrigation_off
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Wasser aus'
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: switch.turn_off
        target:
            entity_id:
              - switch.relay_garden_valve1
              - switch.relay_garden_valve2
              - switch.relay_garden_valve3
              - switch.relay_garden2_valve1
              - switch.relay_garden2_valve2
              - switch.relay_garden2_valve3

  - alias: garden_irrigation_on
    id: garden_irrigation_on
    mode: parallel
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Hecke bewässern'
        variables:
            valve_no: 1
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Hochbeete bewässern'
        variables:
            valve_no: 2
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Rosengarten bewässern'
        variables:
            valve_no: 3
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: switch.turn_on
        target:
            entity_id: "switch.relay_garden{{ 2 if valve_no > 3 else '' }}_valve{{ ( valve_no - 1 ) % 3 + 1 }}"

  - alias: garden_irrigation_valve_start
    id: garden_irrigation_valve_start
    mode: parallel
    triggers:
      - trigger: time
        at:
          - input_datetime.irrigation_start_1
          - input_datetime.irrigation_start_2
          - input_datetime.irrigation_start_3
          - input_datetime.irrigation_start_4
          - input_datetime.irrigation_start_5
          - input_datetime.irrigation_start_6
        variables:
            valve_no: "{{ trigger.entity_id [32:] }}"
    conditions:
      - condition: state
        entity_id: input_boolean.irrigation_activated
        state: "on"
      - condition: template
        value_template: >
            {#% set valve_no = trigger.entity_id [32:] %#}
            {% set n = valve_no | string %}
            {% set day = now().weekday() %}
            {{
                states ( 'input_boolean.irrigation_scheduled_valve' + n ) and
                (
                    day == 0 and states ( 'input_boolean.irrigation_valve' + n + '_at_monday' )    == 'on' or
                    day == 1 and states ( 'input_boolean.irrigation_valve' + n + '_at_tuesday' )   == 'on' or
                    day == 2 and states ( 'input_boolean.irrigation_valve' + n + '_at_wednesday' ) == 'on' or
                    day == 3 and states ( 'input_boolean.irrigation_valve' + n + '_at_thursday' )  == 'on' or
                    day == 4 and states ( 'input_boolean.irrigation_valve' + n + '_at_friday' )    == 'on' or
                    day == 5 and states ( 'input_boolean.irrigation_valve' + n + '_at_saturday' )  == 'on' or
                    day == 6 and states ( 'input_boolean.irrigation_valve' + n + '_at_sunday' )    == 'on'
                )
            }}
    actions:
      - variables:
            duration: "{{ states ( 'sensor.irrigation_duration_effective_valve' + valve_no | string ) }}"
      - action: timer.start
        target:
            entity_id: "timer.irrigation_valve{{ valve_no }}"
        data:
            duration: "{{ ( duration / 60 ) | int }}:{{ duration % 60 }}:00"
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - action: switch.turn_on
        target:
            entity_id: "switch.relay_garden{{ 2 if valve_no > 3 else '' }}_valve{{ ( valve_no - 1 ) % 3 + 1 }}"

  - alias: garden_irrigation_valve_stop
    id: garden_irrigation_valve_stop
    mode: parallel
    triggers:
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve1
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve2
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve3
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve4
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve5
      - trigger: event
        event_type:
          - timer.finished
        event_data:
            entity_id: timer.irrigation_valve6
    actions:
      - variables:
            valve_no: "{{ trigger.event.data.entity_id [22:] }}"
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - action: switch.turn_off
        target:
            entity_id: "switch.relay_garden{{ 2 if valve_no > 3 else '' }}_valve{{ ( valve_no - 1 ) % 3 + 1 }}"

  - alias: garden_irrigation_schedule
    id: garden_irrigation_schedule
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_precipitation_threshold
      - trigger: state
        entity_id: sensor.precipitation_7d_plus_forecast
    actions:
      - variables:
            mode: >
                {% set val = states ( 'sensor.precipitation_7d_plus_forecast' ) | float %}
                {% set thr = states ( 'input_number.irrigation_precipitation_threshold' ) | float %}
                {% set t_max = states ( 'sensor.dht22_terrace_temperature_max' ) | float %}
                {% set t_thr_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | float %}
                {% if val < thr and t_max >= t_thr_low %}
                    on
                {% else %}
                    off
                {% endif %}
      - repeat:
            count: 6
            sequence:
              - action: "input_boolean.turn_{{ mode }}"
                target:
                    entity_id: "input_boolean.irrigation_scheduled_valve{{ repeat.index }}"

  - alias: garden_irrigation_set_temperature_thresholds_by_low
    id: garden_irrigation_set_temperature_thresholds_by_low
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_low
    actions:
      - variables:
            temp_high_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {{ max ( [temp_low, temp_high] ) }}
            temp_hot_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ max ( [temp_low, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_high
        data:
            value: "{{ temp_high_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_hot
        data:
            value: "{{ temp_hot_new }}"

  - alias: garden_irrigation_set_temperature_thresholds_by_high
    id: garden_irrigation_set_temperature_thresholds_by_high
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_high
    actions:
      - variables:
            temp_low_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {{ min ( [temp_low, temp_high] ) }}
            temp_hot_new: >
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ max ( [temp_high, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_low
        data:
            value: "{{ temp_low_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_hot
        data:
            value: "{{ temp_hot_new }}"

  - alias: garden_irrigation_set_temperature_thresholds_by_hot
    id: garden_irrigation_set_temperature_thresholds_by_hot
    mode: single
    max_exceeded: silent
    triggers:
      - trigger: state
        entity_id: input_number.irrigation_temperature_threshold_hot
    actions:
      - variables:
            temp_low_new: >
                {% set temp_low = states ( 'input_number.irrigation_temperature_threshold_low' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ min ( [temp_low, temp_hot] ) }}
            temp_high_new: >
                {% set temp_high = states ( 'input_number.irrigation_temperature_threshold_high' ) | int %}
                {% set temp_hot = states ( 'input_number.irrigation_temperature_threshold_hot' ) | int %}
                {{ min ( [temp_high, temp_hot] ) }}
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_low
        data:
            value: "{{ temp_low_new }}"
      - action: input_number.set_value
        target:
            entity_id: input_number.irrigation_temperature_threshold_high
        data:
            value: "{{ temp_high_new }}"

  - alias: garden_hydrotower_pump_switching
    id: garden_hydrotower_pump_switching
    triggers:
      # check every minute
      - trigger: time_pattern
        minutes: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.hydrotower_activated
        state: 'on'
      - condition: state
        entity_id: timer.hydrotower_pump_period
        state: idle
    actions:
      - action: timer.start
        target:
            entity_id: timer.hydrotower_pump_period
        data:
            duration: "{{ ( states ( 'input_number.hydrotower_pump_period' ) | int / 60 ) | int }}:{{ states ( 'input_number.hydrotower_pump_period' ) | int % 60 }}:0"

  - alias: garden_hydrotower_pump_start
    id: garden_hydrotower_pump_start
    triggers:
      - trigger: event
        event_type: timer.started
        event_data:
            entity_id: timer.hydrotower_pump_period
      - trigger: state
        entity_id: switch.relay_hydrotower_pump
        to: "on"
    actions:
      - action: timer.start
        target:
            entity_id: timer.hydrotower_pump_duration
        data:
            duration: "{{ ( states ( 'input_number.hydrotower_pump_duration' ) | int / 60 ) | int }}:{{ states ( 'input_number.hydrotower_pump_duration' ) | int % 60 }}:0"
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - action: switch.turn_on
        target:
            entity_id: switch.relay_hydrotower_pump

  - alias: garden_hydrotower_pump_stop
    id: garden_hydrotower_pump_stop
    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
            entity_id: timer.hydrotower_pump_duration
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: switch.turn_off
        target:
            entity_id: switch.relay_hydrotower_pump

  - alias: garden_pool_pump_switching
    id: garden_pool_pump_switching
    triggers:
      # check every minute
      - trigger: time_pattern
        minutes: "/1"
    conditions:
      - condition: state
        entity_id: input_boolean.pool_pump_activated
        state: 'on'
      - condition: state
        entity_id: timer.pool_pump_period
        state: idle
      - condition: time
        after: input_datetime.pool_pump_start
        before: input_datetime.pool_pump_end
    actions:
      - action: timer.start
        target:
            entity_id: timer.pool_pump_period
        data:
            duration: "{{ ( states ( 'sensor.pool_pump_period_length' ) | int / 60 ) | int }}:{{ states ( 'sensor.pool_pump_period_length' ) | int % 60 }}:0"

  - alias: garden_pool_pump_start
    id: garden_pool_pump_start
    triggers:
      - trigger: event
        event_type: timer.started
        event_data:
            entity_id: timer.pool_pump_period
      - trigger: state
        entity_id: switch.poolpumpe
        to: "on"
    actions:
      - action: timer.start
        target:
            entity_id: timer.pool_pump_duration
        data:
            duration: "{{ ( states ( 'input_number.pool_pump_duration_period' ) | int / 60 ) | int }}:{{ states ( 'input_number.pool_pump_duration_period' ) | int % 60 }}:0"
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - action: switch.turn_on
        target:
            entity_id: switch.poolpumpe

  - alias: garden_pool_pump_stop
    id: garden_pool_pump_stop
    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
            entity_id: timer.pool_pump_duration
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: switch.turn_off
        target:
            entity_id: switch.poolpumpe

  - alias: garden_waterpump_emergency_stop
    id: garden_waterpump_emegency_stop
    triggers:
      - trigger: template
        value_template: "{{ states ( 'sensor.wasserpumpe_power' ) | int > states ( 'input_number.waterpump_emergency_stop_power_threshold' ) | int }}"
        for:
            minutes: "{{ states ( 'input_number.waterpump_emergency_stop_duration' ) | int }}"
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: notify.simplepush
        data:
            message: "Notfallstop Wasserpumpe mit Leistung größer {{ states ( 'input_number.waterpump_emergency_stop_power_threshold' ) | int }} für {{ states ( 'input_number.waterpump_emergency_stop_duration' ) | int }} Minuten."
            title: "Home Assistant ({{ states ( 'input_text.hostname' ) | lower }})"
      - action: switch.turn_off
        target:
            entity_id: switch.wasserpumpe

  - alias: garden_mower_start
    id: garden_mower_start
    triggers:
      - trigger: time
        at: input_datetime.mowing_start
    conditions:
        # check stage
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
        # check manual flag
      - condition: state
        entity_id: input_boolean.mowing_activated
        state: 'on'
      - condition: template
        value_template: >
            {% set day = now().weekday() %}
            {{
               day == 0 and states ( 'input_boolean.mowing_at_monday' )    == 'on' or
               day == 1 and states ( 'input_boolean.mowing_at_tuesday' )   == 'on' or
               day == 2 and states ( 'input_boolean.mowing_at_wednesday' ) == 'on' or
               day == 3 and states ( 'input_boolean.mowing_at_thursday' )  == 'on' or
               day == 4 and states ( 'input_boolean.mowing_at_friday' )    == 'on' or
               day == 5 and states ( 'input_boolean.mowing_at_saturday' )  == 'on' or
               day == 6 and states ( 'input_boolean.mowing_at_sunday' )    == 'on'
            }}
    actions:
      - action: gardena_smart_system.start_override
        target:
            entity_id: lawn_mower.sileno
        data:
            duration: "{{ ( as_timestamp ( today_at ( states ( 'input_datetime.mowing_end' ) ) ) - as_timestamp ( today_at ( states ( 'input_datetime.mowing_start' ) ) ) ) | int }}"

  - alias: garden_mower_end
    id: garden_mower_end
    triggers:
      - trigger: time
        at: input_datetime.mowing_end
    conditions:
        # check stage
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    action:
      - action: lawn_mower.pause
        target:
            entity_id: lawn_mower.sileno
