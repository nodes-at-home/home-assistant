###
### junand 06.06.2023
###

  - alias: climate_schedule
    id: climate_schedule
    triggers:
      - trigger: time_pattern
        minutes: "/5"
      - trigger: state
        entity_id: group.family
        to: "home"
      # - trigger: state
      #   entity_id: input_boolean.climate_activated
      #   to: "on"
      - trigger: state
        entity_id: 
          - input_number.climate_target_temperature
          - input_number.climate_min_forecast_temperature
          - input_number.climate_min_forecast_temperature_sunny
          - input_number.climate_min_outdoor_temperature
          - sensor.boiler_outside_temperature
      - trigger: state
        entity_id:
          - binary_sensor.fenster_schlafzimmer
          - binary_sensor.dachfenster_schlafzimmer
          - binary_sensor.fenster_kinderzimmer
          - binary_sensor.dachfenster_kinderzimmer
          - binary_sensor.fenster_arbeitszimmer
          - binary_sensor.dachfenster_arbeitszimmer
        to: "off"
        for: "00:00:10"
    conditions:
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
      - condition: time
        after: input_datetime.climate_startperiode_begin
        before: input_datetime.climate_startperiode_end
      - condition: state
        entity_id: group.family
        state: "home"
      - condition: numeric_state
        entity_id: sensor.sh10rt_master_battery_level
        above: input_number.climate_min_battery_level
      - condition: numeric_state
        entity_id: sensor.total_dc_power
        above: input_number.climate_min_pv_generation
      - or:
          - and:
              - not:
                  - condition: state
                    entity_id: sensor.openweathermap_forecast_condition
                    state: sunny
              - condition: numeric_state
                entity_id: sensor.openweathermap_forecast_temperature
                above: input_number.climate_min_forecast_temperature
          - and:
              - condition: state
                entity_id: sensor.openweathermap_forecast_condition
                state: sunny
              - condition: numeric_state
                entity_id: sensor.openweathermap_forecast_temperature
                above: input_number.climate_min_forecast_temperature_sunny
      - condition: numeric_state
        entity_id: sensor.boiler_outside_temperature
        above: input_number.climate_min_outdoor_temperature
    actions:
      - repeat:
            for_each:
              - climate: office
                window: arbeitszimmer
              - climate: bedroom
                window: schlafzimmer
              - climate: nursery
                window: kinderzimmer
            sequence:
              # TODO switch on and off depending on all states of windows, temps and pv_production
              - if:
                  - condition: template
                    value_template: >
                        {# start only climates which are scheduled, not running and with closed windows #}
                        {{
                            states ( 'input_boolean.climate_start_' + repeat.item.climate ) == 'on'
                            and states ( 'input_boolean.climate_' + repeat.item.climate + '_scheduled' ) == 'off'
                            and states ( 'climate.' + repeat.item.climate ) == 'off'
                            and states ( 'binary_sensor.fenster_' + repeat.item.window ) == 'off'
                            and states ( 'binary_sensor.dachfenster_' + repeat.item.window ) == 'off'
                        }}
                then:
                  - action: input_boolean.turn_on
                    data:
                        entity_id: "{{ 'input_boolean.climate_' + repeat.item.climate + '_scheduled' }}"

  - alias: climate_start
    id: climate_start
    triggers:
      - trigger: time_pattern
        minutes: "/1"
      - trigger: state
        entity_id: 
          - input_boolean.climate_office_scheduled
          - input_boolean.climate_bedroom_scheduled
          - input_boolean.climate_nursery_scheduled
        to: "on"
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: "on"
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
    actions:
      - repeat:
            for_each:
              - climate: office
                window: arbeitszimmer
              - climate: bedroom
                window: schlafzimmer
              - climate: nursery
                window: kinderzimmer
            sequence:
              - if:
                  - condition: template
                    value_template: >
                        {# start climates which are not running and scheduled #}
                        {{
                            states ( 'input_boolean.climate_' + repeat.item.climate + '_scheduled' ) == 'on'
                            and states ( 'climate.' + repeat.item.climate ) == 'off'
                        }}
                then:
                  # setting hvac mode swuitches on the climate device; turn_on service sets heat_cool mode!!!
                  - action: climate.set_hvac_mode
                    target:
                        entity_id: "climate.{{ repeat.item.climate }}"
                    data:
                        hvac_mode: "{{ states ( 'input_select.climate_hvac_mode' ) }}"
                    # setting temperature needs a runnung climate device
                  - delay: 10
                  - action: script.climate_set_temperature
                    data:
                      device: "{{ repeat.item.climate }}"
                  - delay: 10
                  - action: climate.set_fan_mode
                    target:
                        entity_id: "climate.{{ repeat.item.climate }}"
                    data:
                        fan_mode: "{{ states ( 'input_select.climate_fan_mode' ) }}"
                  - delay: 10
                  - action: climate.set_swing_mode
                    target:
                        entity_id: "climate.{{ repeat.item.climate }}"
                    data:
                        swing_mode: "{{ 'on' if is_state ( 'input_select.climate_swing_mode', 'True' ) else 'off' }}"
                  - delay: 10
                  - action: climate.set_preset_mode
                    target:
                        entity_id: "climate.{{ repeat.item.climate }}"
                    data:
                        preset_mode: "{{ states ( 'input_select.climate_preset_mode' ) }}"

  - alias: climate_supervise_temperature
    id: climate_supervise_temperature
    triggers:
      - trigger: state
        entity_id:
          - climate.office
          - climate.bedroom
          - climate.nursery
        attribute: current_temperature
        variables:
            device: "{{ trigger.entity_id [8:] }}"
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: "on"
      - condition: template
        value_template: "{{ states ( 'input_boolean.climate_' + device + '_scheduled' ) == 'on' }}"
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
    actions:
      - if:
          - condition: template
            value_template: "{{ states ( 'climate.' + device ) != 'off' }}"
        then:
          - action: script.climate_set_temperature
            data:
                device: "{{ device }}"

  - alias: climate_target_temperature
    id: climate_target_temperature
    triggers:
      - trigger: state
        entity_id: 
          - input_number.climate_target_temperature
          - input_number.climate_target_temperature_step
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: "on"
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
    actions:
      - repeat:
            for_each:
              - office
              - bedroom
              - nursery
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ states ( 'climate.' + repeat.item ) != 'off' }}"
                then:
                  - action: script.climate_set_temperature
                    data:
                        device: "{{ repeat.item }}"

  - alias: climate_stop
    id: climate_stop
    triggers:
      - trigger: numeric_state
        entity_id: sensor.total_dc_power
        below: input_number.climate_min_pv_generation
        for:
            minutes: "{{ states ( 'input_number.climate_min_pv_generation_duration' ) }}"
        variables:
            immediate_turn_off: false
            window_turn_off: false
      - trigger: state
        entity_id: group.family
        to: "not_home"
        variables:
            immediate_turn_off: "{{ states ( 'input_boolean.climate_absence_goon' ) != 'on' }}"
            window_turn_off: false
      - trigger: numeric_state
        entity_id: sensor.boiler_outside_temperature
        below: input_number.climate_min_outdoor_temperature
        variables:
            immediate_turn_off: false
            window_turn_off: false
      - trigger: state
        entity_id:
          - binary_sensor.fenster_schlafzimmer
          - binary_sensor.dachfenster_schlafzimmer
          - binary_sensor.fenster_kinderzimmer
          - binary_sensor.dachfenster_kinderzimmer
          - binary_sensor.fenster_arbeitszimmer
          - binary_sensor.dachfenster_arbeitszimmer
        to: "on"
        for: "00:00:10"
        variables:
            immediate_turn_off: false
            window_turn_off: true
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: "on"
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
    actions:
      - repeat:
            for_each:
              - climate: office
                window: arbeitszimmer
              - climate: bedroom
                window: schlafzimmer
              - climate: nursery
                window: kinderzimmer
            sequence:
              - if:
                  - condition: template
                    value_template: >
                        {{
                            states ( 'climate.' + repeat.item.climate ) != 'off'
                            and (
                                immediate_turn_off
                                or (
                                    not window_turn_off and
                                    states ( 'input_boolean.climate_' + repeat.item.climate + '_scheduled' ) == 'on'
                                    and states ( 'input_boolean.climate_stop_' + repeat.item.climate ) == 'on'
                                ) 
                                or (
                                    window_turn_off and
                                    (
                                        states ( 'binary_sensor.fenster_' + repeat.item.window ) == 'on'
                                        or states ( 'binary_sensor.dachfenster_' + repeat.item.window ) == 'on'
                                    )
                                )
                            )
                        }}
                then:
                  - action: climate.turn_off
                    target:
                        entity_id: "climate.{{ repeat.item.climate }}"

  - alias: climate_turned_off
    id: climate_turned_off
    triggers:
      - trigger: state
        entity_id: 
          - climate.office
          - climate.bedroom
          - climate.nursery
        to: 'off'
        variables:
            device: "{{ trigger.entity_id [8:] }}"
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - condition: state
        entity_id: input_boolean.climate_activated
        state: 'on'
    actions:
      - action: input_boolean.turn_off
        data:
            entity_id: "{{ 'input_boolean.climate_' + device + '_scheduled' }}"

  - alias: climate_night_mode
    id: climate_night_mode
    triggers:
        platform: state
        entity_id: remote.sony_kd_55ag9
        from: "on"
        to: "off"
        for:
            minutes: 1
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: "on"
      - condition: state
        entity_id: input_boolean.climate_activated
        state: "on"
    actions:
      - repeat:
            for_each:
              - office
              - bedroom
              - nursery
            sequence:
              - if:
                  - condition: template
                    value_template: >
                        {{
                            states ( 'input_boolean.climate_' + repeat.item + '_scheduled' ) == 'on'
                            and states ( 'climate.' + repeat.item ) != 'off'
                        }}
                then:
                  - action: climate.set_preset_mode
                    target:
                        entity_id: "climate.{{ repeat.item }}"
                    data:
                        preset_mode: sleep

  - alias: climate_absence_goon
    id: climate_absence_goon
    triggers:
      - trigger: event
        event_type:  bosch_shc.event
        event_data:
            event_type: SCENARIO
            event_subtype: 'Klimaanlage anlassen'
    actions:
      - action: input_boolean.turn_on
        data:
            entity_id: input_boolean.climate_absence_goon

  - alias: climate_absence_goon_reset
    id: climate_absence_goon_reset
    triggers:
      - trigger: time
        at: "23:59:00"
    actions:
      - action: input_boolean.turn_off
        data:
            entity_id: input_boolean.climate_absence_goon
