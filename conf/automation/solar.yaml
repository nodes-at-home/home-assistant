###
### 13.08.2023
###

  - alias: solar_set_battery_forced_charge_discharge
    id: solar_set_battery_forced_charge_discharge
    triggers:
      - trigger: state
        entity_id: input_select.set_battery_forced_charge_discharge
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    variables:
        forced_charge: 0xAA
        forced_discharge: 0xBB
        stop_default: 0xCC
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 13050 # reg 13051
            value: >
                {% set val = states ( 'input_select.set_battery_forced_charge_discharge' ) %}
                {% if val == 'Stop (default)' %}
                    {{stop_default}}
                {% elif val == 'Forced charge' %}
                    {{forced_charge}}
                {% elif val == 'Forced discharge' %}
                    {{forced_discharge}}
                {% else %}
                    {{stop_default}}
                {% endif %}

  - alias: solar_update_battery_forced_charge_discharge
    id: solar_update_battery_forced_charge_discharge
    triggers:
      - trigger: state
        entity_id: sensor.battery_forced_charge_discharge
    conditions: []
    actions:
      - action: input_select.select_option
        target:
            entity_id: input_select.set_battery_forced_charge_discharge
        data:
            option: "{{ states ( 'sensor.battery_forced_charge_discharge' ) }}"

  - alias: solar_sh10rt_master_set_inverter_runmode
    id: solar_sh10rt_master_inverter_runmode
    triggers:
      - trigger: state
        entity_id: input_button.inverter_master_startup
        variables:
            runmode: startup
      - trigger: state
        entity_id: input_button.inverter_master_shutdown
        variables:
            runmode: shutdown
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    variables:
        inverter_start: 0xCF
        inverter_stop: 0xCE
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 12999 # reg 13000
            value: >
                {% if runmode == "startup" %}
                    {{inverter_start}}
                {% else %}
                    {{inverter_stop}}
                {% endif %}

  - alias: solar_sh10rt_slave_set_inverter_runmode
    id: solar_sh10rt_slave_set_inverter_runmode
    triggers:
      - trigger: state
        entity_id: input_button.inverter_slave_startup
        variables:
            runmode: startup
      - trigger: state
        entity_id: input_button.inverter_slave_shutdown
        variables:
            runmode: shutdown
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    variables:
        inverter_start: 0xCF
        inverter_stop: 0xCE
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_slave
            slave: 2
            address: 12999 # reg 13000
            value: >
                {% if runmode == "startup" %}
                    {{inverter_start}}
                {% else %}
                    {{inverter_stop}}
                {% endif %}

  - alias: solar_set_max_soc
    id: solar_set_max_soc
    triggers:
      - trigger: state
        entity_id: input_number.set_max_soc
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 13057 # reg 13058
            value: "{{ states ( 'input_number.set_max_soc' ) | int * 10 }}"

  - alias: solar_update_max_soc
    id: solar_update_max_soc
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_max_soc
    conditions: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_max_soc
        data:
            value: "{{ states ( 'sensor.sh10rt_master_max_soc' ) }}"

  - alias: solar_set_min_soc
    id: solar_set_min_soc
    triggers:
      - trigger: state
        entity_id: input_number.set_min_soc
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 13058 # reg 13059
            value: "{{ states ( 'input_number.set_min_soc' ) | int * 10 }}"

  - alias: solar_update_min_soc
    id: solar_update_min_soc
    triggers:
      - trigger: state
        entity_id:
          - sensor.sh10rt_master_min_soc
    conditions: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_min_soc
        data:
            value: "{{ states ( 'sensor.sh10rt_master_min_soc' ) }}"

  - alias: solar_set_backup_soc
    id: solar_set_backup_soc
    triggers:
      - trigger: state
        entity_id: input_number.set_backup_soc
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 13099 # reg 13100
            value: "{{ states ( 'input_number.set_backup_soc' ) | int }}"

  - alias: solar_update_backup_soc
    id: solar_update_backup_soc
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_reserved_soc_for_backup
    conditions: []
    actions:
      - action: input_number.set_value
        target:
              entity_id: input_number.set_backup_soc
        data:
              value: "{{ states ( 'sensor.sh10rt_master_reserved_soc_for_backup' ) }}"

  - alias: solar_set_battery_charge_start_power
    id: solar_set_battery_charge_start_power
    triggers:
      - trigger: state
        entity_id: input_number.set_battery_charge_start_power
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 33148 # reg 33149
            value: "{{ ( states ( 'input_number.set_battery_charge_start_power' ) | float / 10.0 ) | int }}"

  - alias: solar_update_battery_charge_start_power
    id: solar_update_battery_charge_start_power
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_battery_charge_start_power
    conditions: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_battery_charge_start_power
        data:
            value: "{{ states ( 'sensor.sh10rt_master_battery_charge_start_power' ) }}"

  - alias: solar_set_battery_discharge_start_power
    id: solar_set_battery_dischargestart_power
    triggers:
      - trigger: state
        entity_id: input_number.set_battery_discharge_start_power
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 33149 # reg 33150
            value: "{{ ( states ( 'input_number.set_battery_discharge_start_power' ) |float / 10.0 ) | int}}"

  - alias: solar_update_battery_discharge_start_power
    id: solar_update_battery_discharge_start_power
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_battery_discharge_start_power
    condition: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_battery_discharge_start_power
        data:
            value: "{{ states ( 'sensor.sh10rt_master_battery_discharge_start_power' ) }}"

  - alias: solar_set_battery_max_charge_power
    id: solar_set_battery_max_charge_power
    triggers:
      - trigger: state
        entity_id: input_number.set_battery_max_charge_power
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 33046 # reg 33047
            value: "{{ ( states ( 'input_number.set_battery_max_charge_power' ) | float / 10.0 ) | int}}"

  - alias: solar_update_battery_max_charge_power
    id: solar_update_battery_max_charge_power
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_battery_max_charge_power
    conditions: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_battery_max_charge_power
        data:
            value: "{{ states ( 'sensor.sh10rt_master_battery_max_charge_power' ) }}"

  - alias: solar_set_battery_max_discharge_power
    id: solar_set_battery_max_discharge_power
    triggers:
      - trigger: state
        entity_id: input_number.set_battery_max_discharge_power
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 33047 # reg 33048
            value: "{{ ( states ( 'input_number.set_battery_max_discharge_power' ) | float / 10.0 ) | int}}"

  - alias: solar_update_battery_max_discharge_power
    id: solar_update_battery_max_discharge_power
    triggers:
      - trigger: state
        entity_id: sensor.sh10rt_master_battery_max_discharge_power
    conditions: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_battery_max_discharge_power
        data:
            value: "{{ states('sensor.sh10rt_master_battery_max_discharge_power') }}"

  - alias: solar_set_battery_forced_charge_discharge_power
    id: solar_set_battery_forced_charge_discharge_power
    triggers:
      - trigger: state
        entity_id: input_number.set_battery_forced_charge_discharge_power
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
    actions:
      - action: modbus.write_register
        data:
            hub: SH10RT_master
            slave: 1
            address: 13051 # reg 13052
            value: "{{ states ( 'input_number.set_battery_forced_charge_discharge_power' ) | int }}"

  - alias: solar_update_battery_forced_charge_discharge_power
    id: solar_update_battery_forced_charge_discharge_power
    triggers:
      - trigger: state
        entity_id:
          - sensor.sh10rt_master_battery_forced_charge_discharge_power
    condition: []
    actions:
      - action: input_number.set_value
        target:
            entity_id: input_number.set_battery_forced_charge_discharge_power
        data:
            value: "{{ states ( 'sensor.sh10rt_master_battery_forced_charge_discharge_power' ) }}"

  - alias: solcast_update_forecast
    id: solcast_update_forecast
    triggers:
      - trigger: template
        value_template: >-
            {% set nr = as_datetime(state_attr('sun.sun','next_rising')) | as_local %}
            {% set ns = as_datetime(state_attr('sun.sun','next_setting')) | as_local %}
            {% set api_request_limit = 5 %}
            {% if nr > ns %}
                {% set nr = nr - timedelta(hours = 24) %}
            {% endif %}
            {% set hours_difference = (ns - nr) %}
            {% set interval_hours = hours_difference / api_request_limit %}
            {% set ns = namespace(match = false) %}
            {% for i in range(api_request_limit) %}
                {% set start_time = nr + (i * interval_hours) %}
                {% if ((start_time - timedelta(seconds=30)) <= now()) and (now() <= (start_time + timedelta(seconds=30))) %}
                    {% set ns.match = true %}
                {% endif %}
            {% endfor %}
            {{ ns.match }}
    conditions:
      - condition: state
        entity_id: binary_sensor.prod_mode
        state: 'on'
      - condition: sun
        before: sunset
        after: sunrise
    actions:
      - delay:
            seconds: "{{ range ( 30, 360 ) | random | int }}"
      - action: solcast_solar.update_forecasts
        data: {}
